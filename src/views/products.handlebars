<!-- Layout principal -->
<div style="display: flex; justify-content: space-between; align-items: center; padding: 10px;">
  <h1>{{title}}</h1>
  <div style="display: flex; align-items: center; margin-left: auto;">
    {{#if name}}
    <p style="color: #F8A126; margin-right: 10px; margin-bottom: 0;">¡Bienvenido, {{name}}!</p>
    {{/if}}
    <form action="/api/logout" method="get">
      <button type="submit" class="btn btn-success" style="margin-bottom: 10px;">Cerrar Sesión</button>
    </form>
    <!-- Icono de carrito y cantidad -->
    {{#if cart}}
    <form id="cartForm" action="/cart/{{cart}}" method="get">
      <button type="submit" class="btn btn-info" style="margin-bottom: 10px; margin-left: 10px;">
        <i class="fas fa-shopping-cart"></i> <span id="cartQuantity">0</span>
      </button>
    </form>
    {{/if}}
  </div>
</div>

<!-- Listado de productos -->
<div class="row">
  {{#each products}}
  <div class="col-md-6">
    <div class="card" style="margin-bottom: 20px;">
      <img src="{{this.image}}" class="card-img-top" alt="{{this.title}} Image"
        style="max-height: 150px; object-fit: contain; width: 100%;">
      <div class="card-body">
        <h5 class="card-title">{{this.title}}</h5>
        <p class="card-text">Descripción: {{this.description}}</p>
        <p class="card-text">Precio: ${{this.price}}</p>
        {{#if this.category}}
        <p class="card-text">Categoría: {{this.category.name}}</p>
        {{/if}}
        <p class="card-text">Código: {{this.code}}</p>
        <p class="card-text">Stock: {{this.stock}}</p>
        <!-- Botón "Agregar al Carrito" con evento de clic -->
        <button type="button" onclick=" addToCart('{{user._id}}', '{{this._id}}')" class="btn btn-primary">Agregar al
          Carrito</button>
      </div>
    </div>
  </div>
  {{/each}}
</div>

<nav aria-label="Paginacion">
  <ul class="pagination">
    {{#if hasPrevPage}}
    <li class="page-item">
      <a class="page-link"
        href="/products-views?limit={{limit}}&page={{prevPage}}&sort={{sort}}&category={{category}}">Ant</a>
    </li>
    {{/if}}

    <li class="page-item">
      <a class="page-link" href="/products-views?limit={{limit}}&page=1&sort={{sort}}&category={{category}}">Pg 1</a>
    </li>

    {{#each pages}}
    <li class="page-item {{#if (isEqual this ../page)}}active{{/if}}">
      <a class="page-link"
        href="/products-views?limit={{limit}}&page={{this}}&sort={{sort}}&category={{category}}">{{this}}</a>
    </li>
    {{/each}}

    <li class="page-item">
      <a class="page-link" href="#">Pg {{page}} de {{totalPages}}</a>
    </li>

    {{#if hasNextPage}}
    <li class="page-item">
      <a class="page-link"
        href="/products-views?limit={{limit}}&page={{nextPage}}&sort={{sort}}&category={{category}}">Sig</a>
    </li>
    {{/if}}
  </ul>
</nav>

<head>
  <!-- Otros elementos del head -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<!-- Agrega la referencia a SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Agrega la referencia a Axios -->
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>


<script>
  // Manejar la redirección al carrito con JavaScript
  document.getElementById('cartForm').addEventListener('submit', function (event) {
    event.preventDefault(); // Evitar que el formulario se envíe directamente
    redirectToCart('{{userId}}');
  });

  function redirectToCart(userId) {
    // Realizar una acción adicional si es necesario antes de redirigir
    // Por ejemplo, puedes realizar algún trabajo en el cliente antes de ir al carrito

    // Redirigir al carrito
    window.location.href = `http://localhost:8080/cart/${userId}`;
  }
</script>

{{!-- <script>
  // Función para actualizar la cantidad del carrito
  function updateCartQuantity() {
    console.log('Antes de hacer la solicitud');

    // Realizar una solicitud al servidor para obtener la cantidad del carrito
    axios.get('cart/quantity/:cartId')
      .then(response => {
        const cartQuantityFromServer = response.data.quantity;
        // Actualizar el contenido del elemento con el id "cartQuantity"
        document.getElementById('cartQuantity').textContent = cartQuantityFromServer.toString();
        console.log('Cantidad actualizada correctamente:', cartQuantityFromServer);
      })
      .catch(error => {
        console.error('Error al obtener la cantidad del carrito:', error);
      });
  }

  // Llamar a la función al cargar la página
  updateCartQuantity();

</script> --}}

<!-- Script para manejar las operaciones con eventos de clic -->
<script>
  function addToCart(userId, productId) {
    console.log('userId:', userId);
    console.log('productId:', productId);
    // Usar SweetAlert para confirmar la adición al carrito
    Swal.fire({
      title: "¿Agregar al carrito?",
      text: "¿Deseas agregar este producto al carrito?",
      icon: "question",
      showCancelButton: true,
      confirmButtonColor: "#F8A126",
      cancelButtonColor: "#d33",
      confirmButtonText: "Sí, agregar al carrito",
      cancelButtonText: "Cancelar",
    }).then((result) => {
      if (result.isConfirmed) {

        // Usar Axios para enviar la solicitud de adición al carrito con el método POST
        axios.post(`/user/${userId}/product/${productId}`)
          .then(response => {
            // Manejar la respuesta si es necesario
            // Opcional: Puedes mostrar un mensaje adicional al usuario con Swal.fire si la adición es exitosa
            Swal.fire("Agregado al carrito", "El producto se ha agregado al carrito correctamente.", "success");
          })
          .catch(error => {
            // Manejar errores si es necesario
            console.error(error);
            // Opcional: Puedes mostrar un mensaje de error con Swal.fire si hay un problema
            Swal.fire("Error", "Hubo un problema al agregar el producto al carrito.", "error");
          });
      }
    });
  }
</script>